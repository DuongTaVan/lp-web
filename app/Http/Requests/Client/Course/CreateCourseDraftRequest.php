<?php

namespace App\Http\Requests\Client\Course;

use App\Enums\DBConstant;
use App\Traits\ManageFile;
use Illuminate\Foundation\Http\FormRequest;

class CreateCourseDraftRequest extends FormRequest
{
    use ManageFile;
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * @return \Illuminate\Contracts\Validation\Validator
     */
    public function getValidatorInstance()
    {
        $this->formatPrice();
        $this->formatPriceDot();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     */

    protected function formatPrice()
    {
        $this->merge([
            'price' => str_replace(',', '', $this->request->get('price')),
            'price_sub_course' => str_replace(',', '', $this->request->get('price_sub_course'))
        ]);
    }

    /**
     * @return void
     */
    protected function formatPriceDot()
    {
        $this->merge([
            'price' => str_replace('.', '', $this->request->get('price')),
            'price_sub_course' => str_replace('.', '', $this->request->get('price_sub_course'))
        ]);
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $rule = [
            'category_id' => 'required',
            'title' => 'required|max:70',
            'subtitle' => 'required|min:15|max:100',
            'body' => 'required',
            'flow' => 'required',
            'cautions' => 'required',
            'price' => 'required|regex:/^[a-zA-Z0-9]+$/|numeric|min:1000',
            'status' => 'required|in:' . DBConstant::COURSE_STATUS_DRAFT . ',' . DBConstant::COURSE_STATUS_PREVIEW,
            'is_mask_required' => 'required:in' . DBConstant::FACEMASK_OK . ',' . DBConstant::FACEMASK_NG,
//            'preview' => 'nullable|array',
            'preview.*' => 'mimetypes:image/png,image/jpg,image/jpeg,image/gif|max:5120',
        ];
        $this->makeSessionPreviewFile($this, $rule);

        return $rule;
    }

    public function attributes()
    {
        return [
            'subtitle' => 'タイトル補足説明',
            'body' => 'サービス内容',
            'flow' => '当日の流れ',
            'cautions' => 'ご利用に当たって',
            'fixed_num' => '固定数',
            'price' => $this->setPriceAttribute(),
            'minutes_required' => 'ご利用時間',
            'category_id' => 'タイプ',
            'title' => 'タイトル',
        ];
    }

    public function messages()
    {
        return [
            'price.required' => $this->setPriceAttribute() . '、必ず入力してください。',
            'price.min' => $this->setPriceAttribute() . 'には、:min以上の数字を指定してください。',
            'price.max' => $this->setPriceAttribute() . 'には、:max以下の数字を指定してください。',
            'price.numeric' => '半角数字のみを入力して下さい。',
            'price.regex' => '半角数字のみを入力して下さい。',
            'category_id.required' => 'カテゴリを必ず入力してください。',
            'preview.*.max' => 'アップロードされたファイルは5MBを超えています。',
            'preview.*.mimetypes' => 'JPEG, JPG, GIF, PNG形式のファイルを選択してください。',
        ];
    }

    /**
     * Set attribute price
     *
     * @return string
     */
    private function setPriceAttribute()
    {
        $price = __('labels.create_course.validate.livestream.price');
        if (auth('client')->user()->teacher_category_consultation == DBConstant::TEACHER_CATEGORY_CONSULTATION) {
            $price = __('labels.create_course.validate.consultation.price');
        } elseif (auth('client')->user()->teacher_category_fortunetelling == DBConstant::TEACHER_CATEGORY_FORTUNETELLING) {
            $price = __('labels.create_course.validate.fortunetelling.price');
        }

        return $price;
    }
}
